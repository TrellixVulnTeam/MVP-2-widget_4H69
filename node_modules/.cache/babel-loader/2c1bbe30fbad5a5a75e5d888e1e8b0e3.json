{"ast":null,"code":"var _jsxFileName = \"/home/talha/Documents/talha data/invocom-widget-2/src/screens/CalendarScreen/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport logo from '../../assets/logos/invocom-log.png';\nimport Header from '../../Components/Header';\nimport Brand from '../../Components/Brand';\nimport '../../assets/styles/global.scss';\nimport Slider from \"react-slick\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nvar moment = require('moment');\n\nmoment().format();\n\nconst FormScreen = () => {\n  _s();\n\n  var settings = {\n    dots: true,\n    arrows: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 3,\n    slidesToScroll: 1\n  }; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  const [show, setShow] = useState(true);\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  let hoursAndMinutes = time.split(':');\n  let updatedDate = moment(date).set(\"hours\", hoursAndMinutes[0]).set(\"minutes\", hoursAndMinutes[1]).set(\"seconds\", '00').toDate();\n  const timeSlots = {\n    nextSlot: 30,\n    startTime: '8:00 ',\n    endTime: '12:30 '\n  };\n  var slotTime = moment(timeSlots.startTime, \"hh:mm a\");\n  var endTime = moment(timeSlots.endTime, \"hh:mm a\");\n  let times = [];\n\n  while (slotTime < endTime) {\n    //if (!isInBreak(slotTime, timeSlots.breakTime)) {\n    times.push(slotTime.format(\"hh:mm a\")); // }\n\n    slotTime = slotTime.add(timeSlots.nextSlot, 'minutes');\n  }\n\n  const days = [];\n  const dateStart = moment();\n  const dateEnd = moment().add(7, 'days');\n\n  while (dateEnd.diff(dateStart, 'days') >= 0) {\n    days.push(dateStart._d.toString());\n    dateStart.add(1, 'days');\n  }\n\n  const renderDay = (day, id) => {\n    const dayInfo = day.split(' ');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calender-style\",\n      onClick: () => {\n        setDate(day);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-xs\",\n        children: dayInfo[1]\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-xs\",\n        children: dayInfo[2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"complete_bot\",\n    children: [show ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"widget\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message_body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"width\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-center mb-2\",\n            children: /*#__PURE__*/_jsxDEV(Slider, {\n              className: \"slider_comp\",\n              ...settings,\n              children: days.map((day, id) => renderDay(day, id))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-center mb-2\",\n            children: /*#__PURE__*/_jsxDEV(Slider, {\n              className: \"slider_comp\",\n              ...settings,\n              children: times.map((slotTime, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"calender-style\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-xs text-center\",\n                  children: slotTime\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 28\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Brand, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 20\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"img\", {\n      onClick: () => setShow(!show),\n      src: logo,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this);\n};\n\n_s(FormScreen, \"d4fax1WkF10pyfayllQdw4Q1IiY=\");\n\n_c = FormScreen;\nexport default FormScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormScreen\");","map":{"version":3,"sources":["/home/talha/Documents/talha data/invocom-widget-2/src/screens/CalendarScreen/index.js"],"names":["React","useState","logo","Header","Brand","Slider","require","config","moment","format","FormScreen","settings","dots","arrows","infinite","speed","slidesToShow","slidesToScroll","show","setShow","date","setDate","time","setTime","hoursAndMinutes","split","updatedDate","set","toDate","timeSlots","nextSlot","startTime","endTime","slotTime","times","push","add","days","dateStart","dateEnd","diff","_d","toString","renderDay","day","id","dayInfo","map"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport logo from '../../assets/logos/invocom-log.png';\nimport Header from '../../Components/Header';\nimport Brand from '../../Components/Brand'\nimport '../../assets/styles/global.scss';\nimport Slider from \"react-slick\";\n\nrequire('dotenv').config()\nvar moment = require('moment');\nmoment().format();\nconst FormScreen = () => {\n    var settings = {\n        dots: true,\n        arrows:true,\n        infinite: true,\n        speed: 500,\n        slidesToShow: 3,\n        slidesToScroll: 1\n      };\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const[show , setShow] = useState(true);\n    const [date , setDate] = useState('');\n    const [time , setTime] = useState('');\n    let hoursAndMinutes = time.split(':');\n    let updatedDate = moment(date).set(\"hours\",hoursAndMinutes[0]).set(\"minutes\",hoursAndMinutes[1]).set(\"seconds\",'00').toDate();\n    \n    const timeSlots = {\n      nextSlot: 30,\n      startTime: '8:00 ',\n      endTime: '12:30 '\n   };\n   \n   var slotTime = moment(timeSlots.startTime, \"hh:mm a\");\n   var endTime = moment(timeSlots.endTime, \"hh:mm a\");\n   \n   let times = [];\n   while (slotTime < endTime)\n   {\n    //if (!isInBreak(slotTime, timeSlots.breakTime)) {\n       times.push(slotTime.format(\"hh:mm a\"));\n   // }\n   slotTime = slotTime.add(timeSlots.nextSlot, 'minutes');\n   }\n         const days = []\n         const dateStart = moment()\n         const dateEnd = moment().add(7, 'days')\n         while (dateEnd.diff(dateStart, 'days') >= 0) {\n          days.push(dateStart._d.toString())\n          dateStart.add(1, 'days')\n         }\n    const renderDay = (day,id) => {\n             \n      const dayInfo = day.split(' ');\n      return  <div className=\"calender-style\" onClick={() => { setDate(day) }}>\n      <p className=\"text-xs\" key={id}>{dayInfo[1]}</p>\n      <p className=\"text-xs\">{dayInfo[2]}</p>\n   </div >\n    }\n    return (\n      <div className=\"complete_bot\">\n          { show? \n        (          <div className=\"widget\">\n      <Header/>\n\n        <div className=\"message_body\">\n        <div className=\"width\">\n            <div className=\"flex justify-center mb-2\">\n                    <Slider className=\"slider_comp\" {...settings}>\n                           {days.map((day,id) =>\n                              renderDay(day,id)\n                           )}\n                    </Slider>\n                </div>\n            <div className=\"flex justify-center mb-2\">\n            <Slider className=\"slider_comp\" {...settings}>\n                    {times.map((slotTime,id) =>\n                        <div className=\"calender-style\">\n                           <p className=\"text-xs text-center\" key={id}>{slotTime}</p>\n                        </div >\n                    )}\n                     \n                    </Slider>\n                </div>\n                </div>\n        </div>\n       <Brand />\n        </div>)\n        :\n        ('')  \n        }\n\n          <img onClick={()=> setShow(!show)} src={logo} alt=\"\" />\n      </div>\n    )\n}\n\nexport default FormScreen\n"]},"metadata":{},"sourceType":"module"}